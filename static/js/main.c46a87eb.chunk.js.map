{"version":3,"sources":["components/Header.js","components/ToDo.js","components/ToDos.js","components/AddToDo.js","components/CompletedModal.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ToDo","props","count","toDo","onClick","e","handleCompletedModal","ToDos","items","length","map","item","i","key","AddToDo","state","error","handleAddToDo","preventDefault","target","elements","newToDo","value","trim","setState","this","onSubmit","type","name","placeholder","React","Component","CompletedModal","isOpen","isCompletedModalOpen","contentLabel","ariaHideApp","onRequestClose","closeCompletedModal","tempCompletedToDo","handleCompleted","App","toDos","indexOf","prevState","concat","toRemove","filter","componentDidMount","json","localStorage","getItem","JSON","parse","componentDidUpdate","prevProps","stringify","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c46a87eb.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => (\n    <div className=\"header\">\n        <h1 className=\"header__title\">Simple To-Do List</h1>\n        <h2 className=\"header__subtitle\">Keep track of your daily tasks!</h2>\n    </div>\n);\n\nexport default Header;","import React from 'react';\n\n\nconst ToDo = (props) => (\n    <div className=\"to-do\">\n        <p className=\"to-do__text\">{props.count}. {props.toDo}</p>\n        <button\n            className=\"button button--link\" \n            onClick={(e) => {\n                props.handleCompletedModal(props.toDo);\n            }}\n        >\n            Completed\n        </button>\n    </div>\n);\n\nexport default ToDo;","import React from 'react';\nimport ToDo from './ToDo';\n\n\nconst ToDos = (props) => (\n    <div>\n        <div className=\"widget-header\">\n        <h3 className=\"widget-header__title\">Your To-Dos</h3>\n        </div>\n        <div>\n            {props.items.length === 0 && <p className=\"widget__message\">You don't have any task in your list</p>}\n            {\n                props.items.map((item, i) => (\n                    <ToDo \n                        key={item}\n                        count={i + 1} \n                        toDo={item}\n                        handleCompletedModal={props.handleCompletedModal} \n                    />\n                ))\n            }\n        </div>\n    </div>\n);\n\nexport default ToDos;","import React from 'react';\n\n\nclass AddToDo extends React.Component {\n    state = {\n        error: ''\n    }\n    handleAddToDo = (e) =>{\n        e.preventDefault();\n        const toDo = e.target.elements.newToDo.value.trim();\n        const error = this.props.handleAddToDo(toDo);\n\n        this.setState(() => ({ error }));\n\n    if (!error) {\n      e.target.elements.newToDo.value = '';\n    }\n    };\n    render() {\n        return(\n            <div>\n                {this.state.error && <p className=\"add-to-do-error\">{this.state.error}</p>}\n                <form onSubmit={this.handleAddToDo} className=\"add-to-do\">\n                    <input type=\"text\" className=\"add-to-do__input\" name=\"newToDo\" placeholder=\"Enter a new task\"/>\n                    <button className=\"button\">Add To-Do</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default AddToDo;","import React from 'react';\nimport Modal from 'react-modal';\n\n\n\nconst CompletedModal = (props) => (\n    <Modal\n        isOpen={props.isCompletedModalOpen}\n        contentLabel=\"Completed To-Do Confirmation\"\n        ariaHideApp={false}\n        onRequestClose={props.closeCompletedModal}\n        className=\"modal\"\n    >\n        <h3 className=\"modal__title\">Have you completed <span className=\"modal__task\">\"{props.tempCompletedToDo}\"?</span></h3>\n        <p className=\"modal__body\">Clicking on yes this To-Do will be removed from your List</p>\n        <button onClick={props.handleCompleted} className=\"button\">Yes</button>\n        <button onClick={props.closeCompletedModal} className=\"button button--secondary\">No</button>\n    </Modal>\n);\n\nexport default CompletedModal;","import React from 'react';\nimport Header from './components/Header';\nimport ToDos from './components/ToDos';\nimport AddToDo from './components/AddToDo';\nimport CompletedModal from './components/CompletedModal';\nimport 'normalize.css/normalize.css';\nimport './styles/styles.scss';\n\n\nclass App extends React.Component {\n  state = {\n    toDos: [],\n    isCompletedModalOpen: false,\n    tempCompletedToDo: ''\n  }\n  handleAddToDo = (toDo) => {\n    if (!toDo) {\n      return 'Enter valid value to add a new task';\n    } else if (this.state.toDos.indexOf(toDo) > -1) {\n      return 'This task already exists';\n    }\n\n    this.setState((prevState) => ({\n      toDos: prevState.toDos.concat(toDo)\n    }));\n  };\n  handleCompletedModal = (toDo) => {\n    this.setState(() => ({\n      isCompletedModalOpen: true,\n      tempCompletedToDo: toDo\n    }));\n  }\n  closeCompletedModal = () => {\n    this.setState(() => ({\n      isCompletedModalOpen: false,\n      tempCompletedToDo: ''\n    }));\n  };\n  handleCompleted = () => {\n    const toRemove = this.state.tempCompletedToDo;\n    this.setState((prevState) => ({\n      toDos: prevState.toDos.filter((toDo) => toRemove !== toDo),\n      isCompletedModalOpen: false,\n      tempCompletedToDo: ''\n    }));\n  };\n  componentDidMount = () => {\n    try {\n      const json = localStorage.getItem('toDos');\n      const toDos = JSON.parse(json);\n\n      if (toDos) {\n        this.setState(() => ({ toDos }));\n      }\n    } catch (e) {\n\n    }\n  };\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.toDos.length !== this.state.toDos.length) {\n      const json = JSON.stringify(this.state.toDos);\n      localStorage.setItem('toDos', json);\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <Header />\n          <div className=\"widget\">\n            <ToDos items={this.state.toDos} \n              handleCompletedModal={this.handleCompletedModal}\n            />\n            <AddToDo \n              handleAddToDo={this.handleAddToDo}  \n            />\n          </div>\n          <CompletedModal \n            handleCompleted={this.handleCompleted}\n            closeCompletedModal={this.closeCompletedModal}\n            isCompletedModalOpen={this.state.isCompletedModalOpen}\n            tempCompletedToDo={this.state.tempCompletedToDo}\n          />\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}